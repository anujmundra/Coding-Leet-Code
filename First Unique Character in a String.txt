Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.
Example 1:

Input: s = "leetcode"
Output: 0
Example 2:

Input: s = "loveleetcode"
Output: 2
Example 3:

Input: s = "aabb"
Output: -1

My Solution-
//linkedhashmap use kro jisse ki insertion order maintain rahe then loop over string to get occurence of evry char then loop over to the hashmap if the value to a key is equal to 1 take the char value and break and then from the string get the index of the char.
class Solution {
    public int firstUniqChar(String s) {
        
        HashMap<Character,Integer> hm=new LinkedHashMap<>();
        int ans=-1;
        for(char i: s.toCharArray())
        {
            if(!hm.containsKey(i))
                hm.put(i,1);
            else
            {
                int val=hm.get(i);
                hm.put(i,val+1);
            }
        }
        for(char i : hm.keySet())
        {
            //System.out.println(i);
            if(hm.get(i)==1)
            {
                ans = s.indexOf(i);
                break;
            }
        }
        return ans;
    }
}

Good Solution-
class Solution {
     public int firstUniqChar(String s) {
        // Stores lowest index / first index
        int ans = Integer.MAX_VALUE;
        // Iterate from a to z which is 26 which makes it constant
        for(char c='a'; c<='z';c++){
            // indexOf will return first index of alphabet and lastIndexOf will return last index
            // if both are equal then it has occured only once.
            // through this we will get all index's which are occured once
            // but our answer is lowest index
            int index = s.indexOf(c);
            if(index!=-1&&index==s.lastIndexOf(c)){
                ans = Math.min(ans,index);
            }
        }

        // If ans remain's Integer.MAX_VALUE then their is no unique character
        return ans==Integer.MAX_VALUE?-1:ans;
    }   
}
