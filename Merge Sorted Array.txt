You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

//Solution
//approach is to make two pointers at the end of the last value of first array before the zeros and the last value of the second array then compare the both values then fill the largest of them in the last value of zero so basically filling out the largest value to lowest value on place of zeros and which value we are filling reduce the pointer of that partilcuar value and the count value which is the first array zero value that has been replaced by 1 once all the values are traversed array ismerged and sorted inplace.
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        
        if(m==0 && n==1)
            nums1[0]=nums2[0];
        else
        {
            int p1=m-1;
            int p2=n-1;
            int count=m+n-1;
            while(p2>=0 && p1>=0)
            {
                if(nums1[p1]<nums2[p2])
                {
                    nums1[count]=nums2[p2];
                    p2--;
                    count--;
                }
                else
                {
                    nums1[count]=nums1[p1];
                    p1--;
                    count--;
                }
            }
            if(p2>=0)
            {
                while(p2>-1)
                {
                    nums1[count]=nums2[p2];
                    count--;
                    p2--;
                }
            }
        }
        
    }
}